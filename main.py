import nest_asyncio
nest_asyncio.apply()

import logging
import asyncio
import json
import datetime
import os
from io import BytesIO

import matplotlib.pyplot as plt
from aiohttp import web

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# ============ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ID –∞–¥–º–∏–Ω–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ============
ADMIN_ID = 1313829356      # –ê–¥–º–∏–Ω
TRACKED_USER_ID = 558505661  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATS_FILE = "stats.json"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
DANILA_CHAT_ID = None

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
menu_keyboard = ReplyKeyboardMarkup(
    [
        ["‚úÖ –ó–∞–Ω–∏–º–∞–ª—Å—è", "‚ùå –ù–µ –∑–∞–Ω–∏–º–∞–ª—Å—è"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"],
        ["üìà –ì—Ä–∞—Ñ–∏–∫", "üìú –ö–æ–º–∞–Ω–¥—ã"]
    ],
    resize_keyboard=True
)

# ============ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π ============
def load_stats():
    try:
        with open(STATS_FILE, "r") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_stats(stats):
    with open(STATS_FILE, "w") as file:
        json.dump(stats, file)

def update_stats(user_id: str, did_modeling: bool):
    stats = load_stats()
    today = str(datetime.date.today())
    if user_id not in stats:
        stats[user_id] = {}
    stats[user_id][today] = did_modeling
    save_stats(stats)

# ============ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ============
async def start(update: Update, context: CallbackContext):
    global DANILA_CHAT_ID
    user_id = update.message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id == TRACKED_USER_ID:
        DANILA_CHAT_ID = update.message.chat_id

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.message.from_user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å 3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=menu_keyboard
    )

async def did_modeling(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id == TRACKED_USER_ID:
        update_stats(str(user_id), True)
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞–Ω–∏–º–∞–ª—Å—è 3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º!",
            reply_markup=menu_keyboard
        )
    else:
        await update.message.reply_text("–í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!", reply_markup=menu_keyboard)

async def did_not_modeling(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id == TRACKED_USER_ID:
        update_stats(str(user_id), False)
        await update.message.reply_text(
            "–ü–æ–Ω—è–ª–∞, –æ—Ö—É–µ–ª? –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞!",
            reply_markup=menu_keyboard
        )
    else:
        await update.message.reply_text("–í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!", reply_markup=menu_keyboard)

async def stats(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    stats_data = load_stats()
    if user_id == TRACKED_USER_ID or user_id == ADMIN_ID:
        user_stats = stats_data.get(str(TRACKED_USER_ID), {})
        modeling_days = sum(1 for day in user_stats.values() if day)
        total_days = len(user_stats)
        text = f"–ó–∞–Ω–∏–º–∞–ª—Å—è 3D {modeling_days} —Ä–∞–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {total_days} –¥–Ω–µ–π!"
        await update.message.reply_text(text, reply_markup=menu_keyboard)
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∞–¥–º–∏–Ω –∏ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!", reply_markup=menu_keyboard)

async def achievements_command(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    stats_data = load_stats()
    if user_id == TRACKED_USER_ID or user_id == ADMIN_ID:
        user_stats = stats_data.get(str(TRACKED_USER_ID), {})
        modeling_days = sum(1 for day in user_stats.values() if day)
        achievement_levels = [
            (1, "–ü–µ—Ä–≤—ã–π —à–∞–≥: 1 –¥–µ–Ω—å –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è"),
            (3, "–ù–æ–≤–∏—á–æ–∫: 3 –¥–Ω—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è"),
            (5, "–ù–∞—á–∏–Ω–∞—é—â–∏–π –º–æ–¥–µ–ª–ª–µ—Ä: 5 –¥–Ω–µ–π –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è"),
            (10, "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–¥–µ–ª–ª–µ—Ä: 10 –¥–Ω–µ–π –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è"),
            (20, "–ü—Ä–æ—Ñ–∏: 20 –¥–Ω–µ–π –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è"),
            (30, "–ì—É—Ä—É 3D: 30 –¥–Ω–µ–π –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è"),
            (50, "–ú–∞—Å—Ç–µ—Ä: 50 –¥–Ω–µ–π –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è"),
            (70, "–°—É–ø–µ—Ä –ú–∞—Å—Ç–µ—Ä: 70 –¥–Ω–µ–π –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è"),
            (100, "–õ–µ–≥–µ–Ω–¥–∞ 3D: 100 –¥–Ω–µ–π –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
        ]
        achievements = [text for threshold, text in achievement_levels if modeling_days >= threshold]
        text = ("–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(achievements)
                if achievements else "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ù–∞—á–Ω–∏ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å!")
        await update.message.reply_text(text, reply_markup=menu_keyboard)
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∞–¥–º–∏–Ω –∏ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!", reply_markup=menu_keyboard)

async def show_commands(update: Update, context: CallbackContext):
    commands = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º
/sdelal - –û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —Ç—ã –∑–∞–Ω–∏–º–∞–ª—Å—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
/ne_zanimalisya - –û—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —è –ª–æ—Ö –∏ –Ω–µ –∑–∞–Ω–∏–º–∞–ª—Å—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
/statistika - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/dostizheniya - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
"""
    await update.message.reply_text(commands, reply_markup=menu_keyboard)

async def plot_stats(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    stats_data = load_stats()
    if user_id == TRACKED_USER_ID or user_id == ADMIN_ID:
        user_stats = stats_data.get(str(TRACKED_USER_ID), {})
        if not user_stats:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.", reply_markup=menu_keyboard)
            return

        sorted_dates = sorted(user_stats.keys())
        x_dates = [datetime.datetime.strptime(date_str, "%Y-%m-%d").date() for date_str in sorted_dates]
        y_values = [1 if user_stats[date_str] else 0 for date_str in sorted_dates]
        cumulative = []
        total = 0
        for val in y_values:
            total += val
            cumulative.append(total)

        plt.figure(figsize=(10, 5))
        plt.plot(x_dates, cumulative, marker='o', linestyle='-')
        plt.title("–ü—Ä–æ–≥—Ä–µ—Å—Å 3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π")
        plt.grid(True)
        plt.xticks(rotation=45)
        plt.tight_layout()

        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()

        await update.message.reply_photo(
            photo=buf,
            caption="–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ 3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è",
            reply_markup=menu_keyboard
        )
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∞–¥–º–∏–Ω –∏ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!", reply_markup=menu_keyboard)

# ============ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ============
async def send_reminder(bot):
    if DANILA_CHAT_ID is not None:
        await bot.send_message(DANILA_CHAT_ID, "–ù–µ –∑–∞–±—É–¥—å –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è 3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–µ–≥–æ–¥–Ω—è!")
    else:
        print("DANILA_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")

def setup_reminders(application):
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        lambda: application.create_task(send_reminder(application.bot)),
        CronTrigger(hour=20, minute=30, day_of_week='mon,wed')
    )
    scheduler.add_job(
        lambda: application.create_task(send_reminder(application.bot)),
        CronTrigger(hour=19, minute=0, day_of_week='tue,thu,fri')
    )
    scheduler.add_job(
        lambda: application.create_task(send_reminder(application.bot)),
        CronTrigger(hour=14, minute=0, day_of_week='sat,sun')
    )
    scheduler.start()

# ============ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ============
async def handle(request):
    return web.Response(text="Bot is running!")

async def start_web_server():
    port = int(os.environ.get("PORT", 8000))
    app_http = web.Application()
    app_http.router.add_get('/', handle)
    runner = web.AppRunner(app_http)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

# ============ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ============
async def main():
    application = Application.builder().token("xxx").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("sdelal", did_modeling))
    application.add_handler(CommandHandler("ne_zanimalisya", did_not_modeling))
    application.add_handler(CommandHandler("statistika", stats))
    application.add_handler(CommandHandler("dostizheniya", achievements_command))
    application.add_handler(CommandHandler("komandy", show_commands))
    application.add_handler(MessageHandler(filters.Regex("^‚úÖ –ó–∞–Ω–∏–º–∞–ª—Å—è$"), did_modeling))
    application.add_handler(MessageHandler(filters.Regex("^‚ùå –ù–µ –∑–∞–Ω–∏–º–∞–ª—Å—è$"), did_not_modeling))
    application.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), stats))
    application.add_handler(MessageHandler(filters.Regex("^üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è$"), achievements_command))
    application.add_handler(MessageHandler(filters.Regex("^üìà –ì—Ä–∞—Ñ–∏–∫$"), plot_stats))
    application.add_handler(MessageHandler(filters.Regex("^üìú –ö–æ–º–∞–Ω–¥—ã$"), show_commands))

    setup_reminders(application)

    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–∏–Ω–≥–æ–≤ (Render –±—É–¥–µ—Ç –ø–æ—Å—ã–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ URL)
    await start_web_server()

    # –ó–∞–ø—É—Å–∫ long polling –¥–ª—è Telegram-–±–æ—Ç–∞
    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
